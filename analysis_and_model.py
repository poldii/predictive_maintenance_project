# analysis_and_model.py

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_auc_score, roc_curve
from xgboost import XGBClassifier
from ucimlrepo import fetch_ucirepo
import os

def analysis_and_model_page():
    st.title("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")

    # 1) –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data_option = st.radio("–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:", ("–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç", "–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV"))

    if data_option == "–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç":
        try:
            ds = fetch_ucirepo(id=601)
            data = pd.concat([ds.data.features, ds.data.targets], axis=1)
        except Exception:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
            return
    else:
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª", type="csv")
        if uploaded_file is None:
            st.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞...")
            return
        data = pd.read_csv(uploaded_file)

    # 2) –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å—Ç–æ–ª–±—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    cols_to_drop = ['UDI', 'Product ID', 'TWF', 'HDF', 'PWF', 'OSF', 'RNF']
    data = data.drop(columns=[c for c in cols_to_drop if c in data.columns], errors='ignore')

    # 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    if 'Type' not in data.columns or 'Machine failure' not in data.columns:
        st.error("–í –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã 'Type' –∏–ª–∏ 'Machine failure'.")
        st.write("–ù–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã:", data.columns.tolist())
        return

    # 4) –ö–æ–¥–∏—Ä—É–µ–º Type
    le = LabelEncoder()
    data['Type'] = le.fit_transform(data['Type'])

    # 5) –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if data.isnull().sum().sum() > 0:
        data = data.fillna(data.mean())

    # 6) –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã, —Å–∫–æ–±–∫–∏, %, <, > –∏ —Ç. –ø.
    def sanitize_col(col_name: str) -> str:
        return (col_name
                .replace(' ', '_')
                .replace('[', '')
                .replace(']', '')
                .replace('(', '')
                .replace(')', '')
                .replace('%', '')
                .replace('<', '')
                .replace('>', ''))

    data = data.rename(columns=lambda x: sanitize_col(x))

    # 7) –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã (–¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏)
    #st.write("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã:", data.columns.tolist())

    # 8) –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ 5 —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–±–µ–∑ –µ–¥–∏–Ω–∏—Ü –∏ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏)
    candidates = {
        'Air_temperature': ['Air_temperature', 'Air_temperature_K'],
        'Process_temperature': ['Process_temperature', 'Process_temperature_K'],
        'Rotational_speed': ['Rotational_speed', 'Rotational_speed_rpm'],
        'Torque': ['Torque', 'Torque_Nm'],
        'Tool_wear': ['Tool_wear', 'Tool_wear_min']
    }

    # 9) –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    present_num_cols = []
    missing_features = []
    for feature_key, options in candidates.items():
        found = next((opt for opt in options if opt in data.columns), None)
        if found:
            present_num_cols.append(found)
        else:
            missing_features.append(feature_key)

    if missing_features:
        st.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {missing_features}")
        st.write("–ù–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã:", data.columns.tolist())
        return

    # 10) –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    scaler = StandardScaler()
    data[present_num_cols] = scaler.fit_transform(data[present_num_cols])

    # 11) –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≥–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö (–ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏)")
    st.dataframe(data.head())

    # 12) –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ X –∏ y
    X = data.drop(columns=['Machine_failure'])
    y = data['Machine_failure']

    # 13) –î–µ–ª–∏–º –Ω–∞ train/test
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42, stratify=y
    )

    # 14) –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    st.subheader("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
    models = {
        "Logistic Regression": LogisticRegression(max_iter=1000),
        "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42),
        "XGBoost": XGBClassifier(
            n_estimators=100,
            learning_rate=0.1,
            eval_metric='logloss',
            random_state=42
        ),

        "SVM": SVC(probability=True, random_state=42)
    }

    best_model = None
    best_auc = 0
    results = []

    plt.figure(figsize=(8, 6))
    for name, model in models.items():
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        y_proba = model.predict_proba(X_test)[:, 1]

        acc = accuracy_score(y_test, y_pred)
        auc = roc_auc_score(y_test, y_proba)
        results.append((name, acc, auc))

        fpr, tpr, _ = roc_curve(y_test, y_proba)
        plt.plot(fpr, tpr, label=f"{name} (AUC={auc:.2f})")

        if auc > best_auc:
            best_auc = auc
            best_model = model

    # 15) –¢–∞–±–ª–∏—Ü–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
    res_df = pd.DataFrame(results, columns=["–ú–æ–¥–µ–ª—å", "Accuracy", "ROC-AUC"])
    st.table(res_df)

    # 16) ROC-–∫—Ä–∏–≤—ã–µ
    plt.plot([0, 1], [0, 1], 'k--')
    plt.xlabel("False Positive Rate")
    plt.ylabel("True Positive Rate")
    plt.title("ROC-–∫—Ä–∏–≤—ã–µ")
    plt.legend()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ROC-–∫—Ä–∏–≤—É—é
    if not os.path.isdir("images"):
        os.mkdir("images")
    plt.savefig("images/roc_curve.png", dpi=150, bbox_inches="tight")
    st.pyplot(plt)

    st.success(f"üü¢ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {best_model.__class__.__name__} (ROC-AUC={best_auc:.3f})")

    # 17) –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫
    st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ (–ª—É—á—à–∞—è –º–æ–¥–µ–ª—å)")
    y_best = best_model.predict(X_test)
    cm = confusion_matrix(y_test, y_best)
    fig, ax = plt.subplots()
    sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", ax=ax)
    ax.set_xlabel("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ")
    ax.set_ylabel("–ò—Å—Ç–∏–Ω–Ω—ã–µ")
    ax.set_title("–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç—Ä–∏—Ü—É –æ—à–∏–±–æ–∫
    fig.savefig("images/confusion_matrix.png", dpi=150, bbox_inches="tight")
    st.pyplot(fig)

    # 18) –û—Ç—á–µ—Ç –æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    st.subheader("–û—Ç—á–µ—Ç –æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ª—É—á—à–∞—è –º–æ–¥–µ–ª—å)")
    cr = classification_report(y_test, y_best, output_dict=True)
    st.table(pd.DataFrame(cr).transpose())

    # 19) –§–æ—Ä–º–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    st.subheader("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è")
    with st.form("prediction_form"):
        type_val = st.selectbox("Type", options=le.classes_.tolist())
        # –ó–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –≤—Ö–æ–¥–µ –º—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ—Å–∏–º –≤ –ø—Ä–∏–≤—ã—á–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö (K, rpm, Nm, min)
        air_temp = st.number_input("Air temperature [K]", value=300.0)
        process_temp = st.number_input("Process temperature [K]", value=310.0)
        rotational_speed = st.number_input("Rotational speed [rpm]", value=1500)
        torque = st.number_input("Torque [Nm]", value=40.0)
        tool_wear = st.number_input("Tool wear [min]", value=100)
        submit = st.form_submit_button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å")

    if submit:
        # 20) –°–æ–∑–¥–∞—ë–º DataFrame —Å —Ç–µ–º–∏ –∂–µ –∏–º–µ–Ω–∞–º–∏ —Å—Ç–æ–ª–±—Ü–æ–≤, —á—Ç–æ –∏ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
        #    ‚Äòpresent_num_cols‚Äô —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –Ω–∞—à–ª–∏ –≤ data:
        #    –Ω–∞–ø—Ä–∏–º–µ—Ä: ['Air_temperature_K', 'Process_temperature_K', 'Rotational_speed_rpm', 'Torque_Nm', 'Tool_wear_min']
        #
        #    –ü–æ—ç—Ç–æ–º—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ i –∏–∑ present_num_cols –º—ã –±–µ—Ä—ë–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        #    (air_temp, process_temp, ...) –ø–æ –ø–æ—Ä—è–¥–∫—É.
        new_df_raw = pd.DataFrame({
            'Type': [le.transform([type_val])[0]],
            present_num_cols[0]: [air_temp],
            present_num_cols[1]: [process_temp],
            present_num_cols[2]: [rotational_speed],
            present_num_cols[3]: [torque],
            present_num_cols[4]: [tool_wear]
        })

        # 21) –°—Ä–∞–∑—É –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —ç—Ç–∏ –∂–µ –∫–æ–ª–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ —Ç–æ—Ç –∂–µ scaler
        try:
            new_df_raw[present_num_cols] = scaler.transform(new_df_raw[present_num_cols])
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            st.write("present_num_cols:", present_num_cols)
            st.write("–ö–æ–ª–æ–Ω–∫–∏ new_df_raw:", new_df_raw.columns.tolist())
            return

        # 22) –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        #    –¢–µ–ø–µ—Ä—å –≤ new_df_raw —Ä–æ–≤–Ω–æ —Ç–∞–∫–∏–µ –∂–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, –∫–∞–∫–∏–µ –±—ã–ª–∏ —É X_train –ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏
        pred = best_model.predict(new_df_raw)[0]
        proba = best_model.predict_proba(new_df_raw)[0][1]
        st.write(f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:** {'–û—Ç–∫–∞–∑ (1)' if pred == 1 else '–ë–µ–∑ –æ—Ç–∫–∞–∑–∞ (0)'}")
        st.write(f"**–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞:** {proba:.2%}")
